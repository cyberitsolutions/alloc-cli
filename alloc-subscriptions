#!/usr/bin/env python

import sys
from alloc import alloc

a = alloc()

# Setup the options that this cli can accept
ops = []
ops.append((''  ,'help           ','Show this help.'))
ops.append((''  ,'csv            ','Return the results in CSV format.'))
ops.append(('q' ,'quiet          ','Run with no output except errors.'))
ops.append(('n' ,'dryrun         ','Perform a dry run, no data gets updated.'))
ops.append(('e:','email=EMAIL    ','Output subscriptions with this email address. Use % for all.'))
ops.append(('a' ,'add            ','Add the following subscriptions from stdin.'))
ops.append(('d' ,'del            ','Delete the following subscriptions from stdin.'))

# Specify some header and footer text for the help text
help_text = """Usage: %s [OPTIONS] [FILE]\nModify interested party subscriptions.\n\n%s

Examples:
alloc-subscriptions --email example@example.com 
alloc-subscriptions --csv --email example@example.com > foo.txt
alloc-subscriptions --del < foo.txt
alloc-subscriptions --add < foo.txt"""

# Get the command line arguments into a dictionary
o, remainder = a.get_args(ops, help_text)

# Got this far, then authenticate
a.authenticate();

# Initialize some variables
a.csv = o['csv']
a.quiet = o['quiet']
a.dryrun = o['dryrun']
personID = a.get_my_personID()

# This is the data format that is exported and imported
fields = ["entity","Entity","entityID","ID","personID","Person ID","emailAddress","Email","fullName","Name"]
keys = fields[::2]
ops = {}

if o['email']:
  ops['emailAddress'] = o['email']
  parties = a.get_list("interestedParty",ops)
  a.print_table(parties,fields)

elif o['add'] or o['del']:
  lines = sys.stdin.readlines()
  for line in lines:
    f = line[:-1].split(",")
    party = {}
    party[keys[0]] = f[0]
    party[keys[1]] = f[1]
    party[keys[2]] = f[2]
    party[keys[3]] = f[3]
    party[keys[4]] = f[4]
    if o['add']: 
      if not o['dryrun']: a.make_request({"method":"save_interestedParty","options":party})
      a.msg("Adding:"+str(party))
    elif o['del']: 
      if not o['dryrun']: a.make_request({"method":"delete_interestedParty","options":party})
      a.msg("Deleting:"+str(party))



