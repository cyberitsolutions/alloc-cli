#!/usr/bin/env python

import sys
from alloc import alloc

a = alloc()

# Setup the options that this cli can accept
ops = []
ops.append((''  ,'help           ','Show this help.'))
#ops.append((''  ,'nude           ','Don\'t display a border or header row in the results.'))
#ops.append(('v', 'verbose        ','Run with more output.'))
ops.append(('n' ,'dryrun         ','Perform a dry run, no data gets updated.'))
ops.append(('q' ,'quiet          ','Run with no output except errors.'))

# Specify some header and footer text for the help text
help_text = '''Usage: %s [OPTIONS]\nSubmit time sheets forwards. Reads the list of time sheets from standard in.\n\n%s

This program enables you to submit your time sheets to managers, admins etc.
The time sheet is moved from eg: Edit to Manager status. The time sheet may 
no longer be editable once you have submitted it.
  
Examples:
alloc-show-time --nude | alloc-push-time --dryrun
alloc-show-time --nude | alloc-push-time
alloc-show-time --nude --status edit --hours ">=7" --date "$(date -d '1 week ago' +%%Y-%%m-%%d)" | alloc-push-time'''

# Get the command line arguments into a dictionary
o, remainder = a.get_args(ops, help_text)

# Got this far, then authenticate
a.authenticate();

# Initialize some variables
a.quiet = o['quiet']
#a.nude = o['nude']
a.dryrun = o['dryrun']

# Read entries from stdin
lines = sys.stdin.readlines()
for line in lines:
  f = line.split()
  timeSheetID = f[0]
  if not o['dryrun']: 
    a.msg("Attempting to submit time sheet: "+timeSheetID)
    a.make_request({"method":"change_timeSheet_status","timeSheetID":timeSheetID,"direction":"forwards"})
  else:
    a.msg("Dry-run, not attempting to submit time sheet: "+timeSheetID)

